{"name":"Nova","tagline":"Software management system.  Boom.","body":"# Nova\r\nNova's main purpose is to help administrate software in a repeatable and predictable manner.  Nova uses predefined scripts (called `Star`s) in order to help do this.  Nova has its own protocol (called starbound) in order to communicate with servers securely.\r\n\r\n## Stars\r\nA star is a simple Ruby script for manage a specific type of software.  They are defined like the following star:\r\n\r\n```Ruby\r\nNova star: :some_star do\r\n  \r\n  metadata do\r\n    # This means that this star requires ruby version 2.0 on the server the star is going to be\r\n    # operating on.  Note the way I phrased that; the star might not be operating on the local\r\n    # computer.\r\n    requires_ruby :ruby, \"2.0\"\r\n\r\n    requires_platform :posix\r\n  end\r\nend\r\n```\r\n\r\nWith this definition, the star will fail to run on servers that don't have any ruby that is compatible with MRI 2.0 in terms of syntax, and don't have a POSIX-compliant platform (i.e. Linux or OSX).  It also does absolutely nothing, but we're gonna modify it to add some stuff for it to do:\r\n\r\n```Ruby\r\nNova star: :some_star do\r\n  to :echo, requires: [:data] do |options|\r\n    line(\"echo\", \"{arg}\").run(arg: options[:data])\r\n  end\r\nend\r\n```\r\n\r\nHere we create an `:echo` event handler that echos on the command line for the platform the given data.  The event requires one argument, called `:data`, which is then passed to the command line when it echos.  Other options may be passed, and they may be ignored.  If `:data` is not provided, the event will fail to run.  The event can also provide defaults, but cannot provide defaults for required options.\r\n\r\n```Ruby\r\nNova::Star.some_star.new.run(:echo, data: \"hello world\")\r\n```\r\n\r\nThis runs the event we just created on the star, passing in our required option.  Note that the actual result, the \"hello world\", is not output to the standard output by default; it's returned as a result from the `line()#run` method (see [`Command::Runner::Message`](http://rdoc.info/github/redjazz96/command-runner/Command/Runner/Message) for more information on that).  The `#run` event on the star returns the value from the block, so we have the result of that method ( _note: if the event could not be found, it'll return an instance of an error instead._ ).\r\n\r\nThat's it for this, read the wiki for more information!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}